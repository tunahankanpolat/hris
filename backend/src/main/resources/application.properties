spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
spring.datasource.url=jdbc:postgresql://obss-postgre:5432/obsshris
spring.datasource.username=postgres
spring.datasource.password=123456
jwt.secret=obsshris
ldap.user.dn.pattern=uid={0},ou=human_resource
management.health.ldap.enabled=false
ldap.partitionSuffix=dc=obss,dc=tech
ldap.principal=cn=admin,dc=obss,dc=tech
ldap.password=123
ldap.url=ldap://obss-ldap:389

linkedin.login-url=https://www.linkedin.com/login
linkedin.account-email=hris.appx@gmail.com
linkedin.account-password=#hrisappx27
linkedin.scrape-url=http://obss-scrape:8081/api/scrape/v1/linkedin
react.base-url=http://localhost:3000
react.auth-redirection-url=http://localhost:3000/oauth2/redirect

elasticsearch.host=obss-elastic:9200

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=hris.appx@gmail.com
spring.mail.password=rglkzqoswkhadcmo
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.security.oauth2.client.registration.linkedin.client-name = linkedin
spring.security.oauth2.client.provider.linkedin.user-name-attribute = id
spring.security.oauth2.client.registration.linkedin.client-id=77t7dcuw1iix7q
spring.security.oauth2.client.registration.linkedin.client-secret= LlAlxVIu5obBzB3h
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.redirect-uri=http://localhost:8080/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress,w_member_social
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,emailAddress,profilePicture(displayImage~:playableStreams))
spring.security.oauth2.client.registration.linkedin.client-authentication-method=client_secret_post
spring.security.oauth2.client.provider.linkedin.user-info-authentication-method=client_secret_post
linkedin.email.api=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
linkedin.revoke.api=https://www.linkedin.com/oauth/v2/revoke